// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 16.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SimpleStringCompression.CodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;


    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public partial class UIMap
    {

        /// <summary>
        /// Clear
        /// </summary>
        public void Clear()
        {
            #region Variable Declarations
            WinButton uIОчиститьButton = this.UIStringCompressorWindow.UIОчиститьWindow.UIОчиститьButton;
            #endregion

            // Щелкните "Очистить" кнопка
            Mouse.Click(uIОчиститьButton, new Point(49, 10));
        }

        /// <summary>
        /// CompareResult
        /// </summary>
        public void CompareResult()
        {
            #region Variable Declarations
            WinEdit uITextOutputEdit = this.UIStringCompressorWindow.UITextOutputWindow.UITextOutputEdit;
            #endregion

            // Щелкните "textOutput" надпись
            Mouse.Click(uITextOutputEdit, new Point(95, 6));

            Assert.AreEqual("a(3)ba", uITextOutputEdit.Text);
        }

        /// <summary>
        /// Compress
        /// </summary>
        public void Compress()
        {
            #region Variable Declarations
            WinButton uIСжатьButton = this.UIStringCompressorWindow.UIСжатьWindow.UIСжатьButton;
            #endregion

            // Щелкните "Сжать" кнопка
            Mouse.Click(uIСжатьButton, new Point(47, 17));
        }

        /// <summary>
        /// Type32Letter - Используйте "Type32LetterParams" для передачи параметров в этот метод.
        /// </summary>
        public void Type32Letter()
        {
            #region Variable Declarations
            WinEdit uITextInputEdit = this.UIStringCompressorWindow.UITextInputWindow.UITextInputEdit;
            #endregion

            // Тип "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" в "textInput" надпись
            uITextInputEdit.Text = this.Type32LetterParams.UITextInputEditText;
        }

        /// <summary>
        /// TypeABBBA - Используйте "TypeABBBAParams" для передачи параметров в этот метод.
        /// </summary>
        public void TypeABBBA()
        {
            #region Variable Declarations
            WinEdit uITextInputEdit = this.UIStringCompressorWindow.UITextInputWindow.UITextInputEdit;
            WinButton uIСжатьButton = this.UIStringCompressorWindow.UIСжатьWindow.UIСжатьButton;
            WinEdit uITextOutputEdit = this.UIStringCompressorWindow.UITextOutputWindow.UITextOutputEdit;
            #endregion

            // Тип "abbba" в "textInput" надпись
            uITextInputEdit.Text = this.TypeABBBAParams.UITextInputEditText;

            // Щелкните "Сжать" кнопка
            Mouse.Click(uIСжатьButton, new Point(72, 12));

            // Щелкните "textOutput" надпись
            Mouse.Click(uITextOutputEdit, new Point(76, 15));
        }

        /// <summary>
        /// CloseDialogue
        /// </summary>
        public void CloseDialogue()
        {
            #region Variable Declarations
            WinControl uIItemDialog = this.UIItemWindow.UIItemWindow1.UIItemDialog;
            WinButton uIОКButton = this.UIОКWindow.UIОКButton;
            #endregion

            // Щелкните Dialog
            Mouse.Click(uIItemDialog, new Point(281, 80));

            Assert.IsTrue(uIItemDialog.Exists);

            // Щелкните "ОК" кнопка
            Mouse.Click(uIОКButton, new Point(17, 12));
        }

        #region Properties
        public virtual Type32LetterParams Type32LetterParams
        {
            get
            {
                if ((this.mType32LetterParams == null))
                {
                    this.mType32LetterParams = new Type32LetterParams();
                }
                return this.mType32LetterParams;
            }
        }

        public virtual TypeABBBAParams TypeABBBAParams
        {
            get
            {
                if ((this.mTypeABBBAParams == null))
                {
                    this.mTypeABBBAParams = new TypeABBBAParams();
                }
                return this.mTypeABBBAParams;
            }
        }

        public UIStringCompressorWindow UIStringCompressorWindow
        {
            get
            {
                if ((this.mUIStringCompressorWindow == null))
                {
                    this.mUIStringCompressorWindow = new UIStringCompressorWindow();
                }
                return this.mUIStringCompressorWindow;
            }
        }

        public UIStringCompressorWindow1 UIStringCompressorWindow1
        {
            get
            {
                if ((this.mUIStringCompressorWindow1 == null))
                {
                    this.mUIStringCompressorWindow1 = new UIStringCompressorWindow1();
                }
                return this.mUIStringCompressorWindow1;
            }
        }

        public UIЗаданныйаргументнахоWindow UIЗаданныйаргументнахоWindow
        {
            get
            {
                if ((this.mUIЗаданныйаргументнахоWindow == null))
                {
                    this.mUIЗаданныйаргументнахоWindow = new UIЗаданныйаргументнахоWindow();
                }
                return this.mUIЗаданныйаргументнахоWindow;
            }
        }

        public UIОКWindow UIОКWindow
        {
            get
            {
                if ((this.mUIОКWindow == null))
                {
                    this.mUIОКWindow = new UIОКWindow();
                }
                return this.mUIОКWindow;
            }
        }

        public UIЗаданныйаргументнахоWindow1 UIЗаданныйаргументнахоWindow1
        {
            get
            {
                if ((this.mUIЗаданныйаргументнахоWindow1 == null))
                {
                    this.mUIЗаданныйаргументнахоWindow1 = new UIЗаданныйаргументнахоWindow1();
                }
                return this.mUIЗаданныйаргументнахоWindow1;
            }
        }

        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion

        #region Fields
        private Type32LetterParams mType32LetterParams;

        private TypeABBBAParams mTypeABBBAParams;

        private UIStringCompressorWindow mUIStringCompressorWindow;

        private UIStringCompressorWindow1 mUIStringCompressorWindow1;

        private UIЗаданныйаргументнахоWindow mUIЗаданныйаргументнахоWindow;

        private UIОКWindow mUIОКWindow;

        private UIЗаданныйаргументнахоWindow1 mUIЗаданныйаргументнахоWindow1;

        private UIItemWindow mUIItemWindow;
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "Type32Letter"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class Type32LetterParams
    {

        #region Fields
        /// <summary>
        /// Тип "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" в "textInput" надпись
        /// </summary>
        public string UITextInputEditText = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "TypeABBBA"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class TypeABBBAParams
    {

        #region Fields
        /// <summary>
        /// Тип "abbba" в "textInput" надпись
        /// </summary>
        public string UITextInputEditText = "abbba";
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIStringCompressorWindow : WinWindow
    {

        public UIStringCompressorWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "StringCompressor";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("StringCompressor");
            #endregion
        }

        #region Properties
        public UITextInputWindow UITextInputWindow
        {
            get
            {
                if ((this.mUITextInputWindow == null))
                {
                    this.mUITextInputWindow = new UITextInputWindow(this);
                }
                return this.mUITextInputWindow;
            }
        }

        public UIСжатьWindow UIСжатьWindow
        {
            get
            {
                if ((this.mUIСжатьWindow == null))
                {
                    this.mUIСжатьWindow = new UIСжатьWindow(this);
                }
                return this.mUIСжатьWindow;
            }
        }

        public UITextOutputWindow UITextOutputWindow
        {
            get
            {
                if ((this.mUITextOutputWindow == null))
                {
                    this.mUITextOutputWindow = new UITextOutputWindow(this);
                }
                return this.mUITextOutputWindow;
            }
        }

        public UIОчиститьWindow UIОчиститьWindow
        {
            get
            {
                if ((this.mUIОчиститьWindow == null))
                {
                    this.mUIОчиститьWindow = new UIОчиститьWindow(this);
                }
                return this.mUIОчиститьWindow;
            }
        }

        public UIStringCompressorTitleBar UIStringCompressorTitleBar
        {
            get
            {
                if ((this.mUIStringCompressorTitleBar == null))
                {
                    this.mUIStringCompressorTitleBar = new UIStringCompressorTitleBar(this);
                }
                return this.mUIStringCompressorTitleBar;
            }
        }

        public WinClient UIStringCompressorClient
        {
            get
            {
                if ((this.mUIStringCompressorClient == null))
                {
                    this.mUIStringCompressorClient = new WinClient(this);
                    #region Условия поиска
                    this.mUIStringCompressorClient.SearchProperties[WinControl.PropertyNames.Name] = "StringCompressor";
                    this.mUIStringCompressorClient.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUIStringCompressorClient;
            }
        }
        #endregion

        #region Fields
        private UITextInputWindow mUITextInputWindow;

        private UIСжатьWindow mUIСжатьWindow;

        private UITextOutputWindow mUITextOutputWindow;

        private UIОчиститьWindow mUIОчиститьWindow;

        private UIStringCompressorTitleBar mUIStringCompressorTitleBar;

        private WinClient mUIStringCompressorClient;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UITextInputWindow : WinWindow
    {

        public UITextInputWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textInput";
            this.WindowTitles.Add("StringCompressor");
            #endregion
        }

        #region Properties
        public WinEdit UITextInputEdit
        {
            get
            {
                if ((this.mUITextInputEdit == null))
                {
                    this.mUITextInputEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITextInputEdit.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUITextInputEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITextInputEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIСжатьWindow : WinWindow
    {

        public UIСжатьWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button2";
            this.WindowTitles.Add("StringCompressor");
            #endregion
        }

        #region Properties
        public WinButton UIСжатьButton
        {
            get
            {
                if ((this.mUIСжатьButton == null))
                {
                    this.mUIСжатьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIСжатьButton.SearchProperties[WinButton.PropertyNames.Name] = "Сжать";
                    this.mUIСжатьButton.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUIСжатьButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIСжатьButton;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UITextOutputWindow : WinWindow
    {

        public UITextOutputWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textOutput";
            this.WindowTitles.Add("StringCompressor");
            #endregion
        }

        #region Properties
        public WinEdit UITextOutputEdit
        {
            get
            {
                if ((this.mUITextOutputEdit == null))
                {
                    this.mUITextOutputEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITextOutputEdit.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUITextOutputEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITextOutputEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIОчиститьWindow : WinWindow
    {

        public UIОчиститьWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("StringCompressor");
            #endregion
        }

        #region Properties
        public WinButton UIОчиститьButton
        {
            get
            {
                if ((this.mUIОчиститьButton == null))
                {
                    this.mUIОчиститьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIОчиститьButton.SearchProperties[WinButton.PropertyNames.Name] = "Очистить";
                    this.mUIОчиститьButton.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUIОчиститьButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIОчиститьButton;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIStringCompressorTitleBar : WinTitleBar
    {

        public UIStringCompressorTitleBar(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.WindowTitles.Add("StringCompressor");
            #endregion
        }

        #region Properties
        public WinButton UIЗакрытьButton
        {
            get
            {
                if ((this.mUIЗакрытьButton == null))
                {
                    this.mUIЗакрытьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIЗакрытьButton.SearchProperties[WinButton.PropertyNames.Name] = "Закрыть";
                    this.mUIЗакрытьButton.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUIЗакрытьButton;
            }
        }

        public WinButton UIРазвернутьButton
        {
            get
            {
                if ((this.mUIРазвернутьButton == null))
                {
                    this.mUIРазвернутьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIРазвернутьButton.SearchProperties[WinButton.PropertyNames.Name] = "Развернуть";
                    this.mUIРазвернутьButton.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUIРазвернутьButton;
            }
        }

        public WinButton UIСвернутьButton
        {
            get
            {
                if ((this.mUIСвернутьButton == null))
                {
                    this.mUIСвернутьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIСвернутьButton.SearchProperties[WinButton.PropertyNames.Name] = "Свернуть";
                    this.mUIСвернутьButton.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUIСвернутьButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIЗакрытьButton;

        private WinButton mUIРазвернутьButton;

        private WinButton mUIСвернутьButton;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIStringCompressorWindow1 : WinWindow
    {

        public UIStringCompressorWindow1()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "StringCompressor";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("StringCompressor");
            #endregion
        }

        #region Properties
        public UITextInputWindow1 UITextInputWindow
        {
            get
            {
                if ((this.mUITextInputWindow == null))
                {
                    this.mUITextInputWindow = new UITextInputWindow1(this);
                }
                return this.mUITextInputWindow;
            }
        }

        public UIСжатьWindow1 UIСжатьWindow
        {
            get
            {
                if ((this.mUIСжатьWindow == null))
                {
                    this.mUIСжатьWindow = new UIСжатьWindow1(this);
                }
                return this.mUIСжатьWindow;
            }
        }

        public UIОчиститьWindow1 UIОчиститьWindow
        {
            get
            {
                if ((this.mUIОчиститьWindow == null))
                {
                    this.mUIОчиститьWindow = new UIОчиститьWindow1(this);
                }
                return this.mUIОчиститьWindow;
            }
        }
        #endregion

        #region Fields
        private UITextInputWindow1 mUITextInputWindow;

        private UIСжатьWindow1 mUIСжатьWindow;

        private UIОчиститьWindow1 mUIОчиститьWindow;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UITextInputWindow1 : WinWindow
    {

        public UITextInputWindow1(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textInput";
            this.WindowTitles.Add("StringCompressor");
            #endregion
        }

        #region Properties
        public WinEdit UITextInputEdit
        {
            get
            {
                if ((this.mUITextInputEdit == null))
                {
                    this.mUITextInputEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITextInputEdit.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUITextInputEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITextInputEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIСжатьWindow1 : WinWindow
    {

        public UIСжатьWindow1(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button2";
            this.WindowTitles.Add("StringCompressor");
            #endregion
        }

        #region Properties
        public WinButton UIСжатьButton
        {
            get
            {
                if ((this.mUIСжатьButton == null))
                {
                    this.mUIСжатьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIСжатьButton.SearchProperties[WinButton.PropertyNames.Name] = "Сжать";
                    this.mUIСжатьButton.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUIСжатьButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIСжатьButton;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIОчиститьWindow1 : WinWindow
    {

        public UIОчиститьWindow1(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("StringCompressor");
            #endregion
        }

        #region Properties
        public WinButton UIОчиститьButton
        {
            get
            {
                if ((this.mUIОчиститьButton == null))
                {
                    this.mUIОчиститьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIОчиститьButton.SearchProperties[WinButton.PropertyNames.Name] = "Очистить";
                    this.mUIОчиститьButton.WindowTitles.Add("StringCompressor");
                    #endregion
                }
                return this.mUIОчиститьButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIОчиститьButton;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIЗаданныйаргументнахоWindow : WinWindow
    {

        public UIЗаданныйаргументнахоWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Заданный аргумент находится вне диапазона допустимых значений.\r\nИмя параметра: Дл" +
                "ина строки не должна превышать 30 символов";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Заданный аргумент находится вне диапазона допустимых значений.\r\nИмя параметра: Дл" +
                    "ина строки не должна превышать 30 символов");
            #endregion
        }

        #region Properties
        public WinText UIЗаданныйаргументнахоText
        {
            get
            {
                if ((this.mUIЗаданныйаргументнахоText == null))
                {
                    this.mUIЗаданныйаргументнахоText = new WinText(this);
                    #region Условия поиска
                    this.mUIЗаданныйаргументнахоText.SearchProperties[WinText.PropertyNames.Name] = "Заданный аргумент находится вне диапазона допустимых значений.Имя параметра: Длин" +
                        "а строки не должна превышать 30 символов";
                    this.mUIЗаданныйаргументнахоText.WindowTitles.Add("Заданный аргумент находится вне диапазона допустимых значений.\r\nИмя параметра: Дл" +
                            "ина строки не должна превышать 30 символов");
                    #endregion
                }
                return this.mUIЗаданныйаргументнахоText;
            }
        }
        #endregion

        #region Fields
        private WinText mUIЗаданныйаргументнахоText;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIОКWindow : WinWindow
    {

        public UIОКWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ОК";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("ОК");
            #endregion
        }

        #region Properties
        public WinButton UIОКButton
        {
            get
            {
                if ((this.mUIОКButton == null))
                {
                    this.mUIОКButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIОКButton.SearchProperties[WinButton.PropertyNames.Name] = "ОК";
                    this.mUIОКButton.WindowTitles.Add("ОК");
                    #endregion
                }
                return this.mUIОКButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIОКButton;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIЗаданныйаргументнахоWindow1 : WinWindow
    {

        public UIЗаданныйаргументнахоWindow1()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Заданный аргумент находится вне диапазона допустимых значений.\r\nИмя параметра: Ст" +
                "рока должна содержать минимум 2 символа";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Заданный аргумент находится вне диапазона допустимых значений.\r\nИмя параметра: Ст" +
                    "рока должна содержать минимум 2 символа");
            #endregion
        }

        #region Properties
        public WinText UIЗаданныйаргументнахоText
        {
            get
            {
                if ((this.mUIЗаданныйаргументнахоText == null))
                {
                    this.mUIЗаданныйаргументнахоText = new WinText(this);
                    #region Условия поиска
                    this.mUIЗаданныйаргументнахоText.SearchProperties[WinText.PropertyNames.Name] = "Заданный аргумент находится вне диапазона допустимых значений.Имя параметра: Стро" +
                        "ка должна содержать минимум 2 символа";
                    this.mUIЗаданныйаргументнахоText.WindowTitles.Add("Заданный аргумент находится вне диапазона допустимых значений.\r\nИмя параметра: Ст" +
                            "рока должна содержать минимум 2 символа");
                    #endregion
                }
                return this.mUIЗаданныйаргументнахоText;
            }
        }
        #endregion

        #region Fields
        private WinText mUIЗаданныйаргументнахоText;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIItemWindow : WinWindow
    {

        public UIItemWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Рабочий стол 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }

        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion

        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.28315.86")]
    public class UIItemWindow1 : WinWindow
    {

        public UIItemWindow1(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }

        #region Properties
        public WinControl UIItemDialog
        {
            get
            {
                if ((this.mUIItemDialog == null))
                {
                    this.mUIItemDialog = new WinControl(this);
                    #region Условия поиска
                    this.mUIItemDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    #endregion
                }
                return this.mUIItemDialog;
            }
        }
        #endregion

        #region Fields
        private WinControl mUIItemDialog;
        #endregion
    }
}
